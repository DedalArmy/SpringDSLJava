grammar org.xtext.spring.SpringConfigDslJava
hidden(WS, ML_COMMENT, SL_COMMENT)
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate springConfigDslJava "http://www.xtext.org/spring/SpringConfigDslJava"

SpringProject returns SpringProject:
	{SpringProject}
	configurations+=Configuration;

Configuration returns Configuration:
	{Configuration} 
	annotationConfiguration+=AnnotationConfiguration
 	(classVisibility=Visibility)? 'class' ID 
 	'{'
 		components+=Component
 	'}'	
;

Component returns Component:
	{Component}
	('@Bean' 
		& ('('(names+=(STRING|StringListAnnotation))')')?
		& ('('(name=(STRING))')')?
		& ('@DependsOn''('dependsOn+=[Component|STRING]')')?
		& ('@Qualifier''('qualifier+=STRING')')?
	(constructorVisibility=Visibility)? class=CreationMethod name=ID '('')'
	'{'
		'return''new'class=CreationMethod'('')' EOL
	'}'
	)
;

AbstractArtefact returns AbstractArtefact:
	Component
;

CreationMethod:
	class=(Class)
;

Class returns Class:
	classname=ID
;

AnnotationConfiguration: 
    {AnnotationConfiguration} 
    (
    	'@Configuration'
    	annotations+=ImportAnnotations*
    )
;

ImportAnnotations:
	(
		('@Import''('ImportFormatRules')') 
		|('@ImportRessource''('ImportFormatRules')')
	)
;

ImportFormatRules:
	('{'ClassFileExtensions'}') 
	| ('value=''{'ClassFileExtensions'}' | '{'StringList'}') 
	| ClassFileExtension 
	| STRING
;

StringListAnnotation:
	('{'StringList'}') 
	| ('value=''{'StringList'}') 
;

StringList:
	STRING(','STRING)*
;

ClassFileExtensions:
	ClassFileExtension(','ClassFileExtension)*
;

ClassFileExtension:
	ID'.class'
;

EOL : 
	';'
;

enum Visibility:
    PUBLIC='public' | PRIVATE='private' | PROTECTED='protected';

terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING:
			'"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
			"'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
		;
terminal ML_COMMENT : '/*' -> '*/';
terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;

terminal WS         : (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;