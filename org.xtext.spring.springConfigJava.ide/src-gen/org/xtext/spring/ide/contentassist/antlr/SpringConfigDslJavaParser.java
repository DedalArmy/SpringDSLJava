/*
 * generated by Xtext 2.15.0
 */
package org.xtext.spring.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.spring.ide.contentassist.antlr.internal.InternalSpringConfigDslJavaParser;
import org.xtext.spring.services.SpringConfigDslJavaGrammarAccess;

public class SpringConfigDslJavaParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SpringConfigDslJavaGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SpringConfigDslJavaGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getComponentAccess().getNamesAlternatives_1_1_1_0(), "rule__Component__NamesAlternatives_1_1_1_0");
			builder.put(grammarAccess.getImportAnnotationsAccess().getAlternatives(), "rule__ImportAnnotations__Alternatives");
			builder.put(grammarAccess.getImportFormatRulesAccess().getAlternatives(), "rule__ImportFormatRules__Alternatives");
			builder.put(grammarAccess.getImportFormatRulesAccess().getAlternatives_1(), "rule__ImportFormatRules__Alternatives_1");
			builder.put(grammarAccess.getStringListAnnotationAccess().getAlternatives(), "rule__StringListAnnotation__Alternatives");
			builder.put(grammarAccess.getVisibilityAccess().getAlternatives(), "rule__Visibility__Alternatives");
			builder.put(grammarAccess.getSpringProjectAccess().getGroup(), "rule__SpringProject__Group__0");
			builder.put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_1_1(), "rule__Component__Group_1_1__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_1_2(), "rule__Component__Group_1_2__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_1_3(), "rule__Component__Group_1_3__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_1_4(), "rule__Component__Group_1_4__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_1_4_0(), "rule__Component__Group_1_4_0__0");
			builder.put(grammarAccess.getAnnotationConfigurationAccess().getGroup(), "rule__AnnotationConfiguration__Group__0");
			builder.put(grammarAccess.getAnnotationConfigurationAccess().getGroup_1(), "rule__AnnotationConfiguration__Group_1__0");
			builder.put(grammarAccess.getImportAnnotationsAccess().getGroup_0(), "rule__ImportAnnotations__Group_0__0");
			builder.put(grammarAccess.getImportAnnotationsAccess().getGroup_1(), "rule__ImportAnnotations__Group_1__0");
			builder.put(grammarAccess.getImportFormatRulesAccess().getGroup_0(), "rule__ImportFormatRules__Group_0__0");
			builder.put(grammarAccess.getImportFormatRulesAccess().getGroup_1_0(), "rule__ImportFormatRules__Group_1_0__0");
			builder.put(grammarAccess.getImportFormatRulesAccess().getGroup_1_1(), "rule__ImportFormatRules__Group_1_1__0");
			builder.put(grammarAccess.getStringListAnnotationAccess().getGroup_0(), "rule__StringListAnnotation__Group_0__0");
			builder.put(grammarAccess.getStringListAnnotationAccess().getGroup_1(), "rule__StringListAnnotation__Group_1__0");
			builder.put(grammarAccess.getStringListAccess().getGroup(), "rule__StringList__Group__0");
			builder.put(grammarAccess.getStringListAccess().getGroup_1(), "rule__StringList__Group_1__0");
			builder.put(grammarAccess.getClassFileExtensionsAccess().getGroup(), "rule__ClassFileExtensions__Group__0");
			builder.put(grammarAccess.getClassFileExtensionsAccess().getGroup_1(), "rule__ClassFileExtensions__Group_1__0");
			builder.put(grammarAccess.getClassFileExtensionAccess().getGroup(), "rule__ClassFileExtension__Group__0");
			builder.put(grammarAccess.getSpringProjectAccess().getConfigurationsAssignment_1(), "rule__SpringProject__ConfigurationsAssignment_1");
			builder.put(grammarAccess.getConfigurationAccess().getAnnotationConfigurationAssignment_1(), "rule__Configuration__AnnotationConfigurationAssignment_1");
			builder.put(grammarAccess.getConfigurationAccess().getClassVisibilityAssignment_2(), "rule__Configuration__ClassVisibilityAssignment_2");
			builder.put(grammarAccess.getConfigurationAccess().getComponentsAssignment_6(), "rule__Configuration__ComponentsAssignment_6");
			builder.put(grammarAccess.getComponentAccess().getNamesAssignment_1_1_1(), "rule__Component__NamesAssignment_1_1_1");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_1_2_1(), "rule__Component__NameAssignment_1_2_1");
			builder.put(grammarAccess.getComponentAccess().getDependsOnAssignment_1_3_2(), "rule__Component__DependsOnAssignment_1_3_2");
			builder.put(grammarAccess.getComponentAccess().getQualifierAssignment_1_4_0_2(), "rule__Component__QualifierAssignment_1_4_0_2");
			builder.put(grammarAccess.getComponentAccess().getConstructorVisibilityAssignment_1_4_1(), "rule__Component__ConstructorVisibilityAssignment_1_4_1");
			builder.put(grammarAccess.getComponentAccess().getClassAssignment_1_4_2(), "rule__Component__ClassAssignment_1_4_2");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_1_4_3(), "rule__Component__NameAssignment_1_4_3");
			builder.put(grammarAccess.getComponentAccess().getClassAssignment_1_4_9(), "rule__Component__ClassAssignment_1_4_9");
			builder.put(grammarAccess.getCreationMethodAccess().getClassAssignment(), "rule__CreationMethod__ClassAssignment");
			builder.put(grammarAccess.getClassAccess().getClassnameAssignment(), "rule__Class__ClassnameAssignment");
			builder.put(grammarAccess.getAnnotationConfigurationAccess().getAnnotationsAssignment_1_1(), "rule__AnnotationConfiguration__AnnotationsAssignment_1_1");
			builder.put(grammarAccess.getComponentAccess().getUnorderedGroup_1(), "rule__Component__UnorderedGroup_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SpringConfigDslJavaGrammarAccess grammarAccess;

	@Override
	protected InternalSpringConfigDslJavaParser createParser() {
		InternalSpringConfigDslJavaParser result = new InternalSpringConfigDslJavaParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SpringConfigDslJavaGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SpringConfigDslJavaGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
